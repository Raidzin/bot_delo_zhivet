1. Install wal-g, crontab, wget, nano in db docker container:
    - # apt-get update && \
        apt-get install -y cron wget nano && \
        wget https://github.com/wal-g/wal-g/releases/download/v0.2.18/wal-g.linux-amd64.tar.gz && \
        tar -zxvf wal-g.linux-amd64.tar.gz && \
        mv wal-g /usr/local/bin/

2. Create S3 Storage on Yandex.Could:
    - create bucket
    - create service account with storage.editor role
    - create new static access key for created user

2. Create setting file .walg.json in /var/lib/postgresql/:
    - # nano /var/lib/postgresql/.walg.json
        {
            "WALG_S3_PREFIX": "s3://<bucket_name>",
            "AWS_ENDPOINT": "https://storage.yandexcloud.net",
            "AWS_REGION": "ru-central1",
            "AWS_ACCESS_KEY_ID": "<ACCESS_KEY>",
            "AWS_SECRET_ACCESS_KEY": "<SECRET_ACCESS_KEY>",
            "WALG_COMPRESSION_METHOD": "brotli",
            "WALG_DELTA_MAX_STEPS": "5",
            "PGDATA": "/var/lib/postgresql/data",
            "PGHOST": "localhost",
            "PGPORT": "5432"
        }

    - # chown postgres: /var/lib/postgresql/.walg.json

3. Create postgres role in db:
    # enter db
    - # psql -h /var/run/postgresql -U admin_delo_zhivet -d delo_zhivet 

    - # CREATE ROLE postgres WITH SUPERUSER LOGIN PASSWORD 'mypassword';

4. Test:
    - # su - postgres -c '/usr/local/bin/wal-g backup-push /var/lib/postgresql/data'


5. Set variables for autocreating wal-g backup:
    - # echo "data_directory = '/var/lib/postgresql/data/'" >> /var/lib/postgresql/data/postgresql.conf && \
        echo "unix_socket_directories = '/var/run/postgresql'" >> /var/lib/postgresql/data/postgresql.conf && \
        echo "wal_level = replica" >> /var/lib/postgresql/data/postgresql.conf && \
        echo "archive_mode = on" >> /var/lib/postgresql/data/postgresql.conf && \
        echo "archive_command = '/usr/local/bin/wal-g wal-push \"%p\" >> /var/log/postgresql/archive_command.log 2>&1' " >> /var/lib/postgresql/data/postgresql.conf && \
        echo "archive_timeout = 3600" >> /var/lib/postgresql/data/postgresql.conf && \
        echo "restore_command = '/usr/local/bin/wal-g wal-fetch \"%f\" \"%p\" >> /var/log/postgresql/restore_command.log 2>&1' " >> /var/lib/postgresql/data/postgresql.conf

6. Create bash script "backup.sh":
    - # nano /backup.sh

        #!/bin/bash
        su - postgres -c '/usr/local/bin/wal-g backup-push /var/lib/postgresql/data'


    - # chmod +x backup.sh

7. Setup crontab:

    - # echo '0 3 * * * /backup.sh >> /var/log/daily-backup.log 2>&1' | crontab -

    - # service cron start
    # check status
    - #service cron status 
